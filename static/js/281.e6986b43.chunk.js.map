{"version":3,"file":"static/js/281.e6986b43.chunk.js","mappings":"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","sources":["redax/contacts.selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactItem.jsx","components/ErrorMessage/ErrorMessage.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","page/ContactsPage.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nconst selectContactsStore = state => state.contactStore;\n\nexport const selectContacts = createSelector(\n  selectContactsStore,\n  contactStore => contactStore.contacts\n);\nexport const selectContactsIsLoading = createSelector(\n  selectContactsStore,\n  contactStore => contactStore.isLoading\n);\nexport const selectContactsError = createSelector(\n  selectContactsStore,\n  contactStore => contactStore.error\n);\nexport const selectContactsFilter = createSelector(\n  selectContactsStore,\n  contactStore => contactStore.filter\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redax/contactsThunk';\nimport { selectContacts } from 'redax/contacts.selectors';\nimport { setFilter } from 'redax/contactsReduсer';\n\nimport { useForm } from 'react-hook-form';\nimport { Button, TextField } from '@mui/material';\n\nconst ContactForm = () => {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm();\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const onSubmit = newContact => {\n    const isDublicate = contacts.some(\n      contact => contact.name === newContact.name\n    );\n    if (isDublicate) {\n      window.alert(`${newContact.name} is already in contacts.`);\n      return;\n    }\n\n    dispatch(addContact(newContact));\n    dispatch(setFilter(''));\n    reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <div>\n        <TextField\n          margin=\"normal\"\n          required\n          name=\"name\"\n          label=\"Name\"\n          type=\"text\"\n          id=\"name\"\n          {...register('name', { required: true })}\n        />\n        {errors.name && <span>This field is required</span>}\n      </div>\n      <div>\n        <TextField\n          margin=\"normal\"\n          required\n          name=\"number\"\n          label=\"Number\"\n          type=\"text\"\n          id=\"number\"\n          {...register('number', { required: true })}\n        />\n      </div>\n\n      <Button type=\"submit\" variant=\"contained\" sx={{ mt: 3, mb: 2 }}>\n        Add contact\n      </Button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import { Button } from '@mui/material';\nimport React from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redax/contactsThunk';\n\nexport default function ContactItem({ contact }) {\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <li>\n      {contact.name}: {contact.number}{' '}\n      <Button\n        onClick={() => handleDeleteContact(contact.id)}\n        variant=\"outlined\"\n        color=\"error\"\n        size=\"small\"\n      >\n        Delete\n      </Button>\n    </li>\n  );\n}\n","import React from 'react';\n\nconst ErrorMessage = ({ message }) => {\n  return <p className=\"error\">{message}</p>;\n};\n\nexport default ErrorMessage;","import React from 'react';\n\nimport { useSelector } from 'react-redux';\n\nimport {\n  selectContacts,\n  selectContactsError,\n  selectContactsIsLoading,\n  selectContactsFilter,\n} from 'redax/contacts.selectors';\n\nimport ContactItem from './ContactItem';\n\nimport Loader from 'components/Loader/Loader';\nimport ErrorMessage from 'components/ErrorMessage/ErrorMessage';\n\nexport default function ContactList() {\n  const contacts = useSelector(selectContacts);\n\n  const filter = useSelector(selectContactsFilter);\n  const isLoading = useSelector(selectContactsIsLoading);\n  const error = useSelector(selectContactsError);\n\n  const filteredContacts =\n    contacts !== null &&\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n\n  return (\n    <div>\n      <ul>\n        {isLoading && <Loader />}\n        {error && <ErrorMessage message={error} />}\n\n        {filteredContacts.map(el => (\n          <ContactItem key={el.id} contact={el} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { selectContactsFilter } from 'redax/contacts.selectors';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redax/contactsReduсer';\nimport { TextField } from '@mui/material';\n\nexport default function Filter() {\n  const filter = useSelector(selectContactsFilter);\n  const dispatch = useDispatch();\n\n  const handleFilter = ({ target: { value } }) => {\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <TextField\n      value={filter}\n      onChange={handleFilter}\n      margin=\"normal\"\n      name=\"filter\"\n      label=\"Find contacts by name\"\n      type=\"text\"\n      id=\"filter\"\n    />\n  );\n}\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\n\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { fetchContacts } from 'redax/contactsThunk';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectContactsStore","state","contactStore","selectContacts","createSelector","contacts","selectContactsIsLoading","isLoading","selectContactsError","error","selectContactsFilter","filter","useForm","register","handleSubmit","reset","errors","formState","dispatch","useDispatch","useSelector","onSubmit","newContact","some","contact","name","window","alert","addContact","setFilter","TextField","margin","required","label","type","id","Button","variant","sx","mt","mb","ContactItem","number","onClick","contactId","deleteContact","color","size","message","className","ContactList","filteredContacts","toLowerCase","includes","Loader","map","el","Filter","value","onChange","target","useEffect","fetchContacts"],"sourceRoot":""}